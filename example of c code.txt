#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Token types
typedef enum {
    KEYWORD,
    IDENTIFIER,
    NUMBER,
    LPAREN,
    RPAREN,
    LBRACE,
    RBRACE,
    COMMA,
    SEMICOLON,
    PRINTF,
    ASSIGN,
    OPERATOR,
    END_OF_FILE,
    UNKNOWN
} TokenType;

// Token structure
typedef struct {
    TokenType type;
    char *value;
} Token;

// AST node types
typedef enum {
    NODE_MAIN_FUNCTION,
    NODE_PRINTF,
    NODE_EXPRESSION,
    NODE_NUMBER,
    NODE_VARIABLE
} ASTNodeType;

// AST Node structure
typedef struct ASTNode {
    ASTNodeType type;
    struct ASTNode *left;
    struct ASTNode *right;
    char *value;
} ASTNode;

// Create a new AST node
ASTNode *create_node(ASTNodeType type, char *value) {
    ASTNode *node = (ASTNode *)malloc(sizeof(ASTNode));
    node->type = type;
    node->value = value ? strdup(value) : NULL;
    node->left = node->right = NULL;
    return node;
}

void free_ast(ASTNode *node) {
    if (node) {
        free(node->value);
        free_ast(node->left);
        free_ast(node->right);
        free(node);
    }
}


// Example function to simulate token fetching
Token next_token() {
    static int index = 0;
    static Token tokens[] = {
        {KEYWORD, "int"},
        {IDENTIFIER, "main"},
        {LPAREN, "("},
        {RPAREN, ")"},
        {LBRACE, "{"},
        {PRINTF, "printf"},
        {LPAREN, "("},
        {NUMBER, "42"},
        {RPAREN, ")"},
        {SEMICOLON, ";"},
        {RBRACE, "}"},
        {END_OF_FILE, NULL}
    };
    return tokens[index++];
}

// Parser functions
ASTNode *parse_main();
ASTNode *parse_printf();
ASTNode *parse_expression();

ASTNode *parse_main() {
    Token token = next_token();
    if (token.type != KEYWORD || strcmp(token.value, "int") != 0) {
        return NULL;
    }
    token = next_token();
    if (token.type != IDENTIFIER || strcmp(token.value, "main") != 0) {
        return NULL;
    }
    token = next_token();
    if (token.type != LPAREN) {
        return NULL;
    }
    token = next_token();
    if (token.type != RPAREN) {
        return NULL;
    }
    token = next_token();
    if (token.type != LBRACE) {
        return NULL;
    }

    ASTNode *main_node = create_node(NODE_MAIN_FUNCTION, "main");
    ASTNode *printf_node = parse_printf();
    if (printf_node) {
        main_node->left = printf_node;
    }

    token = next_token();
    if (token.type != RBRACE) {
        return NULL;
    }

    return main_node;
}

ASTNode *parse_printf() {
    Token token = next_token();
    if (token.type != PRINTF) {
        return NULL;
    }

    token = next_token();
    if (token.type != LPAREN) {
        return NULL;
    }

    ASTNode *expr_node = parse_expression();
    if (!expr_node) {
        return NULL;
    }

    token = next_token();
    if (token.type != RPAREN) {
        return NULL;
    }

    token = next_token();
    if (token.type != SEMICOLON) {
        return NULL;
    }

    ASTNode *printf_node = create_node(NODE_PRINTF, "printf");
    printf_node->left = expr_node;

    return printf_node;
}

ASTNode *parse_expression() {
    Token token = next_token();
    if (token.type == NUMBER) {
        return create_node(NODE_NUMBER, token.value);
    } else if (token.type == IDENTIFIER) {
        return create_node(NODE_VARIABLE, token.value);
    }

    return NULL;
}

void print_ast(ASTNode *node, int depth) {
    if (!node) return;
    for (int i = 0; i < depth; i++) printf("  ");
    printf("%s: %s\n", (node->type == NODE_MAIN_FUNCTION) ? "Main" : 
                     (node->type == NODE_PRINTF) ? "Printf" : 
                     (node->type == NODE_NUMBER) ? "Number" :
                     (node->type == NODE_VARIABLE) ? "Variable" : "Expression", 
                     node->value ? node->value : "NULL");
    print_ast(node->left, depth + 1);
    print_ast(node->right, depth + 1);
}

int main() {
    ASTNode *ast = parse_main();
    if (ast) {
        print_ast(ast, 0);
        free_ast(ast);
    } else {
        printf("Parsing failed.\n");
    }
    return 0;
}
